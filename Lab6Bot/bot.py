from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from emoji import emojize
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from utils import TestStates
import requests
from googletrans import Translator

def get_cat_fact():
    url = 'http://cat-fact.herokuapp.com/facts/random'
    res = requests.get(url)
    json = res.json()
    return str(json['text'])

def get_dog_fact():
    url = 'http://dog-api.kinduff.com/api/facts'
    res = requests.get(url)
    json = res.json()
    return str(*json['facts'])

def translate_fact(text):
    translator = Translator()
    translation = translator.translate(text, dest='ru')
    return translation.text

def to_db(text):
    f = open('last_trans.txt', 'w')
    f.write(text)
    f.close()

def get_db():
    f = open('last_trans.txt', 'r')
    s = ""
    for line in f:
        s += line
    f.close()
    return s

mes_cat = 'Cat fact'
mes_dog = 'Dog fact'
mes_trans = 'Translate'

TOKEN = '5086695702:AAFduCBMMovZdojz-NLaKt5Jlyirm3P-QhU'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage()) # —É–∫–∞–∑—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp.middleware.setup(LoggingMiddleware()) # –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

@dp.message_handler(commands=['start']) # –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
async def process_start_command(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[0]) # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–ª–µ–¥—É—é—â–∞—è –∫–ª–∞–≤–∞
    buttons = [mes_cat, mes_dog]
    keyboard.add(*buttons)
    await message.reply(emojize('Hi!üëã'), reply=False, reply_markup=keyboard)

@dp.message_handler(state=TestStates.TEST_STATE_1) # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—Ç–∞
async def first_test_case_fact(message : types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[1])  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    text = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True) # —Å–ª–µ–¥—É—é—â–∞—è –∫–ª–∞–≤–∞
    buttons = [mes_cat, mes_dog, mes_trans]
    keyboard.add(*buttons)
    if text == mes_cat:
        fact = get_cat_fact()
        await message.answer(fact, reply=False, reply_markup=keyboard)
        to_db(fact)
    elif text == mes_dog:
        fact = get_dog_fact()
        await message.answer(fact, reply=False, reply_markup=keyboard)
        to_db(fact)

@dp.message_handler(state=TestStates.TEST_STATE_2) # –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞
async def second_test_case_trans(message : types.Message):
    state = dp.current_state(user=message.from_user.id)

    text = message.text
    if text == mes_cat:
        fact = get_cat_fact()
        await message.answer(fact, reply=False)
        to_db(fact)
    elif text == mes_dog:
        fact = get_dog_fact()
        await message.answer(fact, reply=False)
        to_db(fact)
    if text == mes_trans: # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        await state.set_state(TestStates.all()[2])
        await message.answer(translate_fact(get_db()), reply=False)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = list(map(str, [i for i in range(1, 11)]))
        keyboard.add(*buttons)
        await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥', reply=False, reply_markup=keyboard) # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤—É

@dp.message_handler(state=TestStates.TEST_STATE_3) # –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—á–∞–ª–æ
async def second_test_case_trans(message : types.Message):
    with open('trans_ratings.txt', 'a') as f:
        f.write(message.text+'\n')
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[0]) # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–ª–µ–¥—É—é—â–∞—è –∫–ª–∞–≤–∞
    buttons = [mes_cat, mes_dog]
    keyboard.add(*buttons)
    await message.reply(emojize('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!'), reply=False, reply_markup=keyboard)
    print(message.text)

if __name__ == "__main__":
    executor.start_polling(dp)
